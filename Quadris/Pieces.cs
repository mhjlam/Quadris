namespace Quadris
{
	class Pieces
	{
		// type, rotation, blocks
		public static int[,,,] Types = new int[7, 4, 5, 5]
		{
			// I
			{
				{
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0},
					{0, 1, 2, 1, 1},
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 2, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 1, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0},
					{1, 1, 2, 1, 0},
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 1, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 2, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 0, 0, 0}
				}
			},
			
			// J
			{
				{
					{0, 0, 0, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 2, 0, 0},
					{0, 1, 1, 0, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 1, 0, 0, 0},
					{0, 1, 2, 1, 0},
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 1, 1, 0},
					{0, 0, 2, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0},
					{0, 1, 2, 1, 0},
					{0, 0, 0, 1, 0},
					{0, 0, 0, 0, 0}
				}
			},

			// L
			{
				{
					{0, 0, 0, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 2, 0, 0},
					{0, 0, 1, 1, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0},
					{0, 1, 2, 1, 0},
					{0, 1, 0, 0, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 1, 1, 0, 0},
					{0, 0, 2, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 0, 1, 0},
					{0, 1, 2, 1, 0},
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0}
				}
			},

			// O
			{
				{
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0},
					{0, 0, 2, 1, 0},
					{0, 0, 1, 1, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0},
					{0, 0, 2, 1, 0},
					{0, 0, 1, 1, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0},
					{0, 0, 2, 1, 0},
					{0, 0, 1, 1, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0},
					{0, 0, 2, 1, 0},
					{0, 0, 1, 1, 0},
					{0, 0, 0, 0, 0}
				}
			},

			// S
			{
				{
					{0, 0, 0, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 2, 1, 0},
					{0, 0, 0, 1, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0},
					{0, 0, 2, 1, 0},
					{0, 1, 1, 0, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 1, 0, 0, 0},
					{0, 1, 2, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 1, 1, 0},
					{0, 1, 2, 0, 0},
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0}
				}
			},

			// T
			{
				{
					{0, 0, 0, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 2, 1, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0},
					{0, 1, 2, 1, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 1, 2, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 1, 2, 1, 0},
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0}
				}
			},

			// Z
			{
				{
					{0, 0, 0, 0, 0},
					{0, 0, 0, 1, 0},
					{0, 0, 2, 1, 0},
					{0, 0, 1, 0, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0},
					{0, 1, 2, 0, 0},
					{0, 0, 1, 1, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 0, 1, 0, 0},
					{0, 1, 2, 0, 0},
					{0, 1, 0, 0, 0},
					{0, 0, 0, 0, 0}
				},
				{
					{0, 0, 0, 0, 0},
					{0, 1, 1, 0, 0},
					{0, 0, 2, 1, 0},
					{0, 0, 0, 0, 0},
					{0, 0, 0, 0, 0}
				}
			}
		};


		// Position offset of each piece when it is created
		public static int[,,] Origins = new int[7, 4, 2]
		{
			// I
			{
				{-2, -2},
				{-2, -1},
				{-2, -2},
				{-2, -0}
			},

			// J
			{
				{-2, -1},
				{-2, -1},
				{-2, -1},
				{-2, -2}
			},

			// L
			{
				{-2, -1},
				{-2, -2},
				{-2, -1},
				{-2, -1}
			},

			// O
			{
				{-2, -2},
				{-2, -2},
				{-2, -2},
				{-2, -2}
			},

			// S
			{
				{-2, -1},
				{-2, -2},
				{-2, -1},
				{-2, -1}
			},

			// T
			{
				{-2, -1},
				{-2, -2},
				{-2, -1},
				{-2, -1}
			},

			// Z
			{
				{-2, -1},
				{-2, -2},
				{-2, -1},
				{-2, -1}
			}
		};


		public static int TileType(Tetromino.Type type, int rotation, int x, int y)
		{
			return Types[(int)type, rotation, x, y];
		}

		public static int OriginX(Tetromino.Type type, int rotation)
		{
			return Origins[(int)type, rotation, 0];
		}

		public static int OriginY(Tetromino.Type type, int rotation)
		{
			return Origins[(int)type, rotation, 1];
		}
	}
}
